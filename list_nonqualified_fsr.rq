#+ summary: List non-qualified FAIR Enabling/Supporting Resources
#+ method: GET
#+ pagination: 10000

prefix np: <http://www.nanopub.org/nschema#>
prefix npa: <http://purl.org/nanopub/admin/>
prefix npx: <http://purl.org/nanopub/x/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix dct: <http://purl.org/dc/terms/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select distinct ?np ?label (group_concat(?typelabel; separator = ", ") as ?types) ?date where {
  graph npa:graph {
    ?np npa:hasHeadGraph ?h .
    ?np dct:created ?date .
    ?np npa:hasValidSignatureForPublicKey ?pubkey .
  }
  graph ?h {
    ?np np:hasAssertion ?a .
    ?np np:hasPublicationInfo ?i.
  }
  graph ?a {
    ?thing a ?maintype .
    values ?maintype { <https://w3id.org/fair/fip/terms/FAIR-Supporting-Resource> <https://w3id.org/fair/fip/terms/FAIR-Enabling-Resource> } .
    ?thing a ?type .
    filter( ?type != <https://w3id.org/fair/fip/terms/FAIR-Supporting-Resource> )
    filter( ?type != <https://w3id.org/fair/fip/terms/Available-FAIR-Supporting-Resource> )
    filter( ?type != <https://w3id.org/fair/fip/terms/FAIR-Supporting-Resource-to-be-Developed> )
    filter( ?type != <https://w3id.org/fair/fip/terms/FAIR-Enabling-Resource> )
    filter( ?type != <https://w3id.org/fair/fip/terms/Available-FAIR-Enabling-Resource> )
    filter( ?type != <https://w3id.org/fair/fip/terms/FAIR-Enabling-Resource-to-be-Developed> )
    bind(replace(str(?type), '^.*/([^/]+)$', '$1') as ?typelabel)
    ?thing rdfs:label ?labelx .
    bind(str(?labelx) as ?label)
  }
  graph ?i {
    ?np (npx:introduces|npx:describes) ?thing .
  }
 optional {
    graph npa:graph {
      ?newversion npa:hasHeadGraph ?nh .
      ?newversion npa:hasValidSignatureForPublicKey ?pubkey .
    }
    graph ?nh {
      ?newversion np:hasPublicationInfo ?ni .
    }
    graph ?ni {
      ?newversion npx:supersedes ?np .
    }
  }
  filter (!bound(?newversion))
  optional {
    graph npa:graph {
      ?retraction npa:hasHeadGraph ?rh .
      ?retraction npa:hasValidSignatureForPublicKey ?pubkey .
    }
    graph ?rh {
      ?retraction np:hasAssertion ?ra .
    }
    graph ?ra {
      ?somebody npx:retracts ?np .
    }
  }
  filter (!bound(?retraction))

  optional {
    graph npa:graph {
      ?disapproval npa:hasHeadGraph ?dh .
      ?disapproval npa:hasValidSignatureForPublicKey ?dpubkey .
    }
    graph <https://w3id.org/np/RAhzbiJ3o0S7iEiLDmVWVqIDRFvWnlubnk9QYY2PnksdI#assertion> {
      ?qpubkeys npx:hasPublicKey ?qpubkey .
    }
    graph ?dh {
      ?disapproval np:hasAssertion ?da .
    }
    graph ?da {
      ?dsomebody ( npx:disapproves-of | npx:disapprovesOf ) ?np .
    }
  }
  filter (!bound(?disapproval))  # No idea why "filter not exists" above doesn't work...

  optional {
    graph npa:graph {
      ?qualification_np npa:hasHeadGraph ?qh .
      ?qualification_np npa:hasValidSignatureForPublicKey ?qpubkey .
    }
    graph <https://w3id.org/np/RAhzbiJ3o0S7iEiLDmVWVqIDRFvWnlubnk9QYY2PnksdI#assertion> {
      ?qpubkeys npx:hasPublicKey ?qpubkey .
    }
    graph ?qh {
      ?qualification_np np:hasAssertion ?qa .
    }
    graph ?qa {
      ?qualifier npx:qualifies ?np_q .
    }
    filter not exists {
      graph npa:graph {
        ?qnewversion npa:hasHeadGraph ?qnh .
        ?qnewversion npa:hasValidSignatureForPublicKey ?qpubkey .
      }
      graph ?qnh {
        ?qnewversion np:hasPublicationInfo ?qni .
      }
      graph ?qni {
        ?qnewversion npx:supersedes ?qualification_np .
      }
    }
    optional {
      graph npa:graph {
        ?qretraction npa:hasHeadGraph ?qrh .
        ?qretraction npa:hasValidSignatureForPublicKey ?qpubkey .
      }
      graph ?qrh {
        ?qretraction np:hasAssertion ?ra .
      }
      graph ?qra {
        ?qsomebody npx:retracts ?qualification_np .
      }
    }
    filter (!bound(?qretraction))

    graph npa:graph {
      ?np_q npa:hasHeadGraph ?h_q .
    }
    graph ?h_q {
      ?np_q np:hasPublicationInfo ?i_q.
    }
    graph ?i_q {
      ?np_q (npx:introduces|npx:describes) ?thing .
    }

  }
  filter (!bound(?qualification_np))
}
group by ?np ?label ?date
order by desc(?date)
