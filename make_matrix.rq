prefix fip: <https://w3id.org/fair/fip/terms/>
prefix dct: <http://purl.org/dc/terms/>
prefix dce: <http://purl.org/dc/elements/1.1/>
prefix npa: <http://purl.org/nanopub/admin/>
prefix npx: <http://purl.org/nanopub/x/>
prefix np: <http://www.nanopub.org/nschema#>
prefix dcat: <https://www.w3.org/ns/dcat#>

select distinct ?fip_index ?fip_title ?community ?c ?supercommunity ?sc ?question ?q ?sort ?nochoice ?resource ?res ?reslabel ?res_np ?rel ?resourcetype ?startdate ?enddate ?qualifier ?qualification_np ?date where {
  ?np np:hasAssertion ?assertion .
  graph npa:graph { ?np dct:created ?date . }
  graph ?assertion {
    ?decl a fip:FIP-Declaration .
    values ?rel {
      fip:declares-current-use-of fip:declares-planned-use-of fip:declares-planned-replacement-of
      # unofficial:
      fip:declares-replacement-from fip:declares-replacement-to
    }
    ?decl ?rel ?resource_pre .
    ?decl fip:refers-to-question ?question .
    # grlc gives an error for some reason if these two optional statements are at the end of the graph block:
    optional { ?decl dcat:startDate ?startdate . }
    optional { ?decl dcat:endDate ?enddate . }
    ?decl fip:declared-by ?community .
  }
  optional {
     ?community dct:isPartOf ?supercommunity .
  }
  graph npa:graph { ?index_np npa:hasValidSignatureForPublicKey ?pubkey . }
  ?index_np np:hasAssertion ?index_a .
  ?index_np np:hasPublicationInfo ?index_i .
  graph ?index_a {
    ?fip_index npx:includesElement ?np .
  }
  graph ?index_i {
    ?fip_index dce:title ?fip_title_l .
  }
  filter not exists {
    ?fip_newer_index npx:includesElement ?newer_np ;
      dce:title ?fip_title_l .
    graph npa:graph { ?newer_np dct:created ?newer_date . }
    filter (?newer_date > ?date)
  }
  filter not exists {
    graph npa:graph {
      ?index_np_new npa:hasHeadGraph ?nh .
      ?index_np_new npa:hasValidSignatureForPublicKey ?pubkey .
    }
    graph ?nh {
      ?index_np_new np:hasPublicationInfo ?ni .
    }
    graph ?ni {
      ?index_np_new npx:supersedes ?index_np .
    }
  }
  filter not exists {
    graph npa:graph {
      ?index_np_r npa:hasHeadGraph ?rh .
      ?index_np_r npa:hasValidSignatureForPublicKey ?pubkey .
    }
    graph ?rh {
      ?index_np_r np:hasAssertion ?ra .
    }
    graph ?ra {
      ?somebody npx:retracts ?index_np .
    }
  }
  
optional {
  graph npa:graph { ?res_np_pre npa:hasValidSignatureForPublicKey ?res_pubkey . }
  ?res_np_pre np:hasAssertion ?res_a .
  ?res_np_pre np:hasPublicationInfo ?res_i .
  graph ?res_a {
    ?resource_pre rdfs:label ?resourcelabel_pre .
  }
  graph ?res_i {
    ?res_np_pre (npx:introduces|npx:describes) ?resource_pre .
  }
  optional {
    graph npa:graph {
      ?res_np_new npa:hasHeadGraph ?rnh .
      ?res_np_new npa:hasValidSignatureForPublicKey ?res_pubkey .
    }
    graph ?rnh {
      ?res_np_new np:hasAssertion ?rha .
      ?res_np_new np:hasPublicationInfo ?rni .
    }
    graph ?rha {
      ?resource_new rdfs:label ?resourcelabel_new .
    }
    graph ?rni {
      ?res_np_new npx:supersedes ?res_np_x .
      ?res_np_new (npx:introduces|npx:describes) ?resource_new .
    }
    # needs to be done properly:
    ?res_np_x npx:supersedes* ?res_np_pre .
    filter not exists {
      graph npa:graph {
        ?res_np_rn npa:hasHeadGraph ?rrhn .
        ?res_np_rn npa:hasValidSignatureForPublicKey ?res_pubkey .
      }
      graph ?rrhn {
        ?res_np_rn np:hasAssertion ?rran .
      }
      graph ?rran {
        ?rnsomebody npx:retracts ?res_np_new .
      }
    }
    filter not exists {
      graph npa:graph {
        ?res_np_sn npa:hasHeadGraph ?rshn .
        ?res_np_sn npa:hasValidSignatureForPublicKey ?res_pubkey .
      }
      graph ?rshn {
        ?res_np_sn np:hasPublicationInfo ?rsin .
      }
      graph ?rsin {
        ?res_np_ns npx:supersedes ?res_np_new .
      }
    }
  }
  bind(coalesce(?resource_new, ?resource_pre) as ?resource)
  bind(coalesce(?res_np_new, ?res_np_pre) as ?res_np)
  bind(coalesce(?resourcelabel_new, ?resourcelabel_pre) as ?resourcelabel)
  filter not exists {
    graph npa:graph {
      ?res_np_r npa:hasHeadGraph ?rrh .
      ?res_np_r npa:hasValidSignatureForPublicKey ?res_pubkey .
    }
    graph ?rrh {
      ?res_np_r np:hasAssertion ?rra .
    }
    graph ?rra {
      ?rsomebody npx:retracts ?res_np .
    }
  }
  filter not exists {
    graph npa:graph {
      ?res_np_s npa:hasHeadGraph ?rsh .
      ?res_np_s npa:hasValidSignatureForPublicKey ?res_pubkey .
    }
    graph ?rsh {
      ?res_np_s np:hasPublicationInfo ?rsi .
    }
    graph ?rsi {
      ?res_np_s npx:supersedes ?res_np .
    }
  }
  optional {
    values ?resourcetype { fip:Available-FAIR-Enabling-Resource fip:FAIR-Enabling-Resource-to-be-Developed }
    ?resource a ?resourcetype
  }

  optional {
    values ?qpubkey {
      "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCtpcftn7kbe6toJbOTDQaCcCssEFSWqt6J4rZ02w+TfY7/eIOgJZYOlpL6G3AzO2RNmVYWRPSlMiykaFuaRuBitvk1GKfGdprfZbvXwmeOxpqCTRBQX9EnFyQyd+Ra/ajfw/UsG8skeu1xnUEpnQbpgbQYc/fvhJNN0UwEc77mOwIDAQAB"^^xsd:string
      "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDO4xkU+/dGujq1raR66QtRqquMxiJ9hm2uzc2uBj7bCBBRnWhTw7M8f77BqAFHShgxqxYTr2do7/tVmoKeM51ISyttxWrh9ebZRoz5o6Muxt7HyA4sLHAmnixeZ5VJfZzsKAmVN23Y2ZiCqMoXjtcp5jO2lOC0AXaGPftnaA8b9QIDAQAB"^^xsd:string
      "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCFntPrMZqvg2kVhCNArNnEn37ddXGwZ/0r4C8CS4lDry7C7YkYgng9yb0UMZQUHiTVkR/5A4m/xjE+Vy+AnwcWUeB75SfGZjE5ylI6VeHjTHi9+2hh2PHYIWnkhU4WHl3COEnxSSa/VouvPzZ2BIWLH6fTrq7NNL3RF5hGegGG0QIDAQAB"^^xsd:string
    }
    graph npa:graph {
      ?qualification_np npa:hasHeadGraph ?qh .
      ?qualification_np npa:hasValidSignatureForPublicKey ?qpubkey .
    }
    graph ?qh {
      ?qualification_np np:hasAssertion ?qa .
    }
    graph ?qa {
      ?qualifier npx:qualifies ?res_np .
    }
    filter not exists {
      graph npa:graph {
        ?qnewversion npa:hasHeadGraph ?qnh .
        ?qnewversion npa:hasValidSignatureForPublicKey ?qpubkey .
      }
      graph ?qnh {
        ?qnewversion np:hasPublicationInfo ?qni .
      }
      graph ?qni {
        ?qnewversion npx:supersedes ?qualification_np .
      }
    }
    filter not exists {
      graph npa:graph {
        ?qretraction npa:hasHeadGraph ?qrh .
        ?qretraction npa:hasValidSignatureForPublicKey ?qpubkey .
      }
      graph ?qrh {
        ?qretraction np:hasAssertion ?ra .
      }
      graph ?qra {
        ?qsomebody npx:retracts ?qualification_np .
      }
    }
  }

}

  bind (replace(str(?community), ".*#", "") as ?c)
  bind (replace(str(?supercommunity), ".*#", "") as ?sc)
  bind (replace(str(?question), "^.*-([^-MD]+(-[MD]+)?)$", "$1") as ?q)
  bind (concat(replace(?q, "F|M", "0"), "x") as ?sort)
  bind (replace(str(?resource), "^.*?(#|/)([^/#]*/?[^/#]*)/?$", "$2") as ?res)
  bind (str(?resourcelabel) as ?reslabel)
  bind (str(?fip_title_l) as ?fip_title)
  bind ("" as ?nochoice)
} order by ?sort ?c ?fip_index ?decl ?res ?res_np ?qualification_np
